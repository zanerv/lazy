#Region ;**** Directives created by AutoIt3Wrapper_GUI ****
#AutoIt3Wrapper_Icon=..\..\Autoit\Icons\ai.ico
#AutoIt3Wrapper_Outfile_x64=..\usual stuff.exe
#AutoIt3Wrapper_UseUpx=y
#AutoIt3Wrapper_Change2CUI=y
#AutoIt3Wrapper_Res_Description=Usual Stuff
#AutoIt3Wrapper_Res_Fileversion=1.2.3.17
#AutoIt3Wrapper_Res_Fileversion_AutoIncrement=y
#AutoIt3Wrapper_Res_LegalCopyright=<none>
#AutoIt3Wrapper_Res_Field=ProductName|Usual Stuff
#AutoIt3Wrapper_Run_Before=taskkill /f /im "usual stuff.exe"
#AutoIt3Wrapper_Run_After=start "usual stuff"  /normal "C:\usual stuff.exe"
#AutoIt3Wrapper_Run_Tidy=y
#EndRegion ;**** Directives created by AutoIt3Wrapper_GUI ****
;#AutoIt3Wrapper_Res_ProductVersion=1.2
#AutoIt3Wrapper_Run_Debug_Mode=n
Opt("TrayIconHide", 1)
;Opt("TrayIconDebug", 1)
#include <Timers.au3>
#include <Misc.au3>
#include <WinAPIEx.au3>
Global $SystemRegKey = "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment"
Global $UserRegKey = "HKEY_CURRENT_USER\Environment"

Global $Rev, $DualMonitor, $qmessenger, $proxifier, $kitty, $outlook
If @Compiled Then
	$Rev = FileGetVersion(@ScriptFullPath)
Else
	$Rev = @ScriptName
EndIf
ConsoleWrite(@HOUR & ":" & @MIN & " Start time" & @CRLF)
Global $wPing = Ping("8.8.8.8", 250)
Global $hPing = Ping("192.168.3.1", 250)
Dim $vSclogin, $jirws_old, $vScwarn
Global Const $lciWM_SYSCommand = 274
Global Const $lciSC_MonitorPower = 61808
Global Const $lciPower_Off = 2
Global Const $lciPower_On = -1
Local $again = 1
Global $hide
Global $Paused = False
Dim $i = 0, $PushTime = 500

Global $MonitorIsOff = False

Global $PID = ProcessExists(@AutoItPID)
Global $hPID = WinGetHandle("[ACTIVE]")
If $hPID = 0x0000000000000000 Then ConsoleWrite("Incorrect Handle: " & $hPID & @CRLF)
ConsoleWrite("Version: " & $Rev & @CRLF)
HotKeySet("{PAUSE}", "Key")
HotKeySet("{F10}", "Key")
Run('C:\USB.exe', @SW_HIDE)
Func Key()
	Global $hPID = WinGetHandle("usual stuff")
	$i += 1
	Sleep($PushTime)
	Switch $i
		Case 1
			If $Paused = True Then ConsoleWrite(">" & @CRLF)
			$Paused = False
			If $hide = 1 Then
				WinSetState($hPID, "", @SW_SHOW)
				WinActivate($hPID)
				$hide = 0
			Else
				WinSetState($hPID, "", @SW_HIDE)
				$hide = 1
			EndIf
		Case 2
			WinSetState($hPID, "", @SW_SHOW)
			WinActivate($hPID)
			$hide = 0
			If $Paused = True Then
				$Paused = False
				ConsoleWrite(">" & @CRLF)
			Else
				ConsoleWrite("||" & @CRLF)
				TogglePause()
			EndIf
		Case 3
			_Monitor_OFF()
			ConsoleWrite("lights out" & @CRLF)
		Case 4
			Exit
	EndSwitch
	$i = 0
EndFunc   ;==>Key

Global $io_control = "off"

Func Monitor($io_control = "on")
	Opt("WinTitleMatchMode", 4)
	Local $WM_SYSCommand = 274
	Local $SC_MonitorPower = 61808
	Local $HWND = WinGetHandle("classname=Progman")
	Switch StringUpper($io_control)
		Case "OFF"
			DllCall("user32.dll", "int", "SendMessage", "hwnd", $HWND, "int", $WM_SYSCommand, "int", $SC_MonitorPower, "int", 2)
		Case "ON"
			DllCall("user32.dll", "int", "SendMessage", "hwnd", $HWND, "int", $WM_SYSCommand, "int", $SC_MonitorPower, "int", -1)
		Case Else
			MsgBox(32, @ScriptName, "Command usage: on/off")
	EndSwitch
EndFunc   ;==>Monitor


While 1
	If $Paused = False Then
;~ 		While WinActive("Administrator:  Administrator using CMD with Admin Privileges")
;~ 			Local $hDLL = DllOpen("user32.dll")
;~ 			If _IsPressed("10", $hDLL) And _IsPressed("2D", $hDLL) Then
;~ 				;If _IsPressed("2D") Then
;~ 				Send(ClipGet())
;~ 				DllClose($hDLL)
;~ 				ExitLoop
;~ 				;EndIf
;~ 			EndIf
;~ 		WEnd
		If WinExists("New Host Key") Then ;SecureCRT Auto-accept
			$srt = WinGetHandle("New Host Key")
			ControlSend($srt, "", "", "{Enter}")
			ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " New Host Key" & @CRLF)
		EndIf
		If WinExists("[TITLE:Registration; class:QWidget]") Then ;WinISO
			$Wiso = WinGetHandle("[TITLE:Registration; class:QWidget]")
			WinActivate($Wiso)
			ControlSend($Wiso, "", "", "{ESC}")
		EndIf
		If Ping("8.8.8.8", 250) <> 0 Then ; It's working time halvale
			If ProcessExists("DualMonitor.exe") == 0 Then ;DualMonitor Auto-Start
				Run("C:\Program Files (x86)\Dual Monitor\DualMonitor.exe")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Start DualMonitor" & @CRLF)
			EndIf
			If ProcessExists("plink.exe") == 0 Then ;tuneeeel Auto-Start
				;Send("{VOLUME_DOWN 50}") ; shush the porn
				Run("nircmd.exe mutesysvolume 1", @WindowsDir)
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " shush the porn" & @CRLF)
				$plink = Run(@ScriptDir & "\..\plink.exe root@meh -P 22 -i C:\peter.ppk -T -D 8899 -N ", @ScriptDir & "\..\", Default, 0x10000)
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " plink tunnel " & @CRLF)
				TrayTip("tunneling", "everyday I`m shoveling!", 4, 1)
				If ProcessExists("proxifier.exe") == 0 Then ;Proxifier Auto-Start
					ProcessWaitClose(ShellExecute("C:\Proxifier.exe"))
					$proxifier = ProcessWait("Proxifier.exe", 3)
					ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Start Proxifier" & @CRLF)
				EndIf
			EndIf
			If ProcessExists("OUTLOOK.EXE") == 0 Then ;Outlook Auto-Start
				$outlook = Run("C:\Program Files\Microsoft Office 15\root\office15\OUTLOOK.EXE")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Start Outlook" & @CRLF)
			EndIf
			If ProcessExists("QMessenger.exe") == 0 Then ;QMessenger Auto-Start
				ShellExecute("C:\Program Files (x86)\Q Messenger\jre1.8.0_40\bin\javaw.exe", "-cp ./* -Djava.library.path=. com.q.startup.QStartup", "C:\Program Files (x86)\Q Messenger\")
				ProcessWait("QMessenger.exe")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Start QMessenger" & @CRLF)
			EndIf
			If WinExists("[TITLE:This is an unregistered copy; class:#32770]") Then ;Sublime Text
				$hndw = WinGetHandle("[TITLE:This is an unregistered copy; class:#32770]", "Purchase")
				ControlClick($hndw, "[CLASS:Button; INSTANCE:2]", "Cancel")
			EndIf
			If WinExists("[TITLE:Authentication Required; class:MozillaDialogClass]") Then ;FF Auto-Login
				Local $ali = WinGetHandle("[TITLE:Authentication Required; class:MozillaDialogClass]")
				WinActivate($ali)
				ControlSend($ali, "", "", "Username{tab}Password{enter}")
				WinWaitClose($ali)
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Auto LogIn" & @CRLF)
				WinWait("[TITLE:Log On Successful - Mozilla Firefox; class:MozillaDialogClass]", "", 1)
				Send("{enter}")
			EndIf
			$sEnvVar = RegRead($UserRegKey, "SecureCRT")
			If $sEnvVar <> " " Then
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " " & $sEnvVar & " was added to SecureCRT" & @CRLF)
				TrayTip("New SecureCRT session created : ", $sEnvVar, 4)
				_SetEnvironment("SecureCRT", " ", 1, 1)
			EndIf
			If WinExists("VMware vSphere Client") And $vSclogin <> WinGetHandle("VMware vSphere Client") Then ;VMware vSphere Client
				Local $vSclogin = WinGetHandle("VMware vSphere Client")
				Sleep(200)
				ControlSend($vSclogin, "", "[NAME:textUsername]", "Username")
				ControlSend($vSclogin, "", "[NAME:textPassword]", "Password")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " vSphere Client login" & @CRLF)
			EndIf
			If WinExists("[TITLE:Security Warning; REGEXPCLASS:WindowsForms10.Window.8.app.*]") And $vScwarn <> WinGetHandle("VMware vSphere Client") Then ;VMware vSphere warning
				Local $vScwarn = WinGetHandle("[TITLE:Security Warning; REGEXPCLASS:WindowsForms10.Window.8.app.*]")
				Sleep(200)
				ControlClick($vScwarn, "", "[NAME:mBtnCancel]")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " vSphere cert warning" & @CRLF)
			EndIf
			If WinExists("[TITLE:Insecure Connection - Mozilla Firefox; class:MozillaWindowClass]") Then ;Insecure Connection
				Local $insec = WinGetHandle("[TITLE:Insecure Connection - Mozilla Firefox; class:MozillaWindowClass]")
				WinActivate($insec)
				ControlSend($insec, "", "", "{TAB}{enter}")
				Sleep(500)
				ControlSend($insec, "", "", "{TAB}{TAB}{enter}")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " FF insecure" & @CRLF)
				WinWait("[TITLE:Add Security Exception; class:MozillaDialogClass]", "", 10)
			EndIf
			If WinExists("[TITLE:Add Security Exception; class:MozillaDialogClass]") Then ;confirm Insecure
				Local $confinsec = WinGetHandle("[TITLE:Add Security Exception; class:MozillaDialogClass]")
				WinActivate($confinsec)
				ControlSend($confinsec, "", "", "{TAB}c")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " FF confirm" & @CRLF)
				WinWaitClose($insec, "", 10)
			EndIf
			If WinExists("[TITLE:Opening iLO-jirc.jnlp; class:MozillaDialogClass]") Then ;Java Remote console
				Local $jnlp = WinGetHandle("[TITLE:Opening iLO-jirc.jnlp; class:MozillaDialogClass]")
				WinActivate($jnlp)
				ControlSend($jnlp, "", "", "{enter}")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " FF Open With" & @CRLF)
			EndIf
			If WinExists("[TITLE:Security Information; class:SunAwtDialog]") Then ;Java Remote console
				Local $jirc = WinGetHandle("[TITLE:Security Information; class:SunAwtDialog]")
				WinActivate($jirc)
				ControlSend($jirc, "", "", "{enter}")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Security Information" & @CRLF)
			EndIf
			If WinExists("[TITLE:Security Warning; class:SunAwtDialog]") Then ;FF Auto-Login
				Local $jirsw = WinGetHandle("[TITLE:Security Warning; class:SunAwtDialog]")
				WinActivate($jirsw)
				ControlSend($jirsw, "", "", "{tab}{tab}{enter}")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Security Warning" & @CRLF)
			EndIf
			If WinExists("[TITLE:Warning - Security; class:SunAwtDialog]") Then ;iDrac login
				Local $jirws = WinGetHandle("[TITLE:Warning - Security; class:SunAwtDialog]")
				If $jirws <> $jirws_old Then
					Local $jirws = WinGetHandle("[TITLE:Warning - Security; class:SunAwtDialog]")
					ControlSend($jirws, "", "", "{enter}")
					ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Warning Security" & @CRLF)
					WinWaitClose($jirws, "", 5)
					Local $jirws_old = WinGetHandle("[TITLE:Warning - Security; class:SunAwtDialog]")

				EndIf
			EndIf
			If WinExists("[TITLE:Log On Successful]") Then ;IE Auto-Login
				Local $alos = WinGetHandle("[TITLE:Log On Successful]")
				WinActivate($alos)
				Sleep(1500)
				ControlSend($alos, "", "", "{enter}")
				ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " Auto LogOn" & @CRLF)
				WinSetTitle($alos, "", "Wait for it...")
			EndIf
		ElseIf Ping("192.168.3.1", 250) <> 0 Then ;undo all the bad shiet you've done this morning
			If ProcessExists("DualMonitor.exe") <> 0 Then
				ProcessClose("DualMonitor.exe")
				Run("explorer.exe", Call(ProcessClose("explorer.exe")))
			EndIf
			If ProcessExists("QMessenger.exe") <> 0 Then ProcessClose("QMessenger.exe")
			If ProcessExists("Proxifier.exe") <> 0 Then ProcessClose("Proxifier.exe")
			If ProcessExists("outlook.exe") <> 0 Then ProcessClose("outlook.exe")
		EndIf

		Opt("WinTitleMatchMode", 3) ;1=start, 2=subStr, 3=exact, 4=advanced, -1 to -4=Nocase
		If WinExists("Security Banner") Then ;VPN Security Banner Auto-Ok
			$hWndSB = WinGetHandle("Security Banner")
			ControlSend($hWndSB, "", "", "{enter}")
			ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " VPN Connected" & @CRLF)
		EndIf
		If WinExists("Cisco AnyConnect") Then ;VPN Security Banner Auto-Ok
			$hWndSB = WinGetHandle("Cisco AnyConnect")
			ControlSend($hWndSB, "", "", "{enter}")
			ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " VPN Connected" & @CRLF)
		EndIf
		If WinExists("Cisco AnyConnect | International VPN") Then ;VPN connect
			$hWndSB = WinGetHandle("Cisco AnyConnect | International VPN")
			ControlSend($hWndSB, "", "Edit2", "123456")
			ControlSend($hWndSB, "", "Button1", "{enter}")
			ConsoleWrite(@HOUR & ":" & @MIN & ":" & @SEC & " VPN Authentication" & @CRLF)
		EndIf
		Opt("WinTitleMatchMode", 1)
	EndIf
	Sleep(100)
WEnd

Global $WM_POWERBROADCAST = 536
Global $PBT_APMRESUMESUSPEND = 0x0007
GUIRegisterMsg($WM_POWERBROADCAST, "Standby")
Func Standby($HWND, $Msg, $wParam, $lParam)
	If $wParam = $PBT_APMRESUMESUSPEND Then
		MsgBox(0, "Hello Back", " You just woke up")
	EndIf
EndFunc   ;==>Standby

Func _Monitor_OFF()
	$MonitorIsOff = True
	Local $Progman_hwnd = WinGetHandle('[CLASS:Progman]')
	Local $TimerInit = TimerInit()

	While $MonitorIsOff = True And TimerDiff($TimerInit) < 3000
		DllCall('user32.dll', 'int', 'SendMessage', _
				'hwnd', $Progman_hwnd, _
				'int', $lciWM_SYSCommand, _
				'int', $lciSC_MonitorPower, _
				'int', $lciPower_Off)
		_IdleWaitCommit(0, $TimerInit)
		Sleep(20)
	WEnd
EndFunc   ;==>_Monitor_OFF

Func _IdleWaitCommit($idlesec, $TimerInit = -1)
	Local $iSave, $LastInputInfo = DllStructCreate("uint;dword")
	DllStructSetData($LastInputInfo, 1, DllStructGetSize($LastInputInfo))
	DllCall("user32.dll", "int", "GetLastInputInfo", "ptr", DllStructGetPtr($LastInputInfo))
	Do
		$iSave = DllStructGetData($LastInputInfo, 2)
		Sleep(60)
		DllCall("user32.dll", "int", "GetLastInputInfo", "ptr", DllStructGetPtr($LastInputInfo))
		If $TimerInit <> -1 And TimerDiff($TimerInit) >= 3000 Then ExitLoop
	Until (DllStructGetData($LastInputInfo, 2) - $iSave) > $idlesec Or $MonitorIsOff = False
	Return DllStructGetData($LastInputInfo, 2) - $iSave
EndFunc   ;==>_IdleWaitCommit

; Function to pause and resume.
Func TogglePause()
	$i = 0
	$Paused = Not $Paused
	While $Paused
		; If idle for more than 2 min
		If _Timer_GetIdleTime() > 2 * 60 * 1000 Then ; Assume Idle
			$Paused = False
			ConsoleWrite(">" & @CRLF)
		EndIf
		Sleep(500)
	WEnd
	ToolTip("")
EndFunc   ;==>TogglePause

Func _SetEnvironment($Name, $Value, $Replace = 0, $KeyVal = 0)
	If $Name = "" Then Return SetError(1)
	If $Value = "" Then Return SetError(2)
	If $Replace <> 0 And $Replace <> 1 Then Return SetError(3)
	Local $ReadEnv

	Local $RegKey = $SystemRegKey
	If $KeyVal = 1 Then $RegKey = $UserRegKey

	If $Replace = 1 Then
		RegWrite($RegKey, $Name, "REG_SZ", $Value)
	Else
		If RegRead($RegKey, $Name) = "" Then RegWrite($RegKey, $Name, "REG_SZ", $Value)
	EndIf
EndFunc   ;==>_SetEnvironment


#cs
	;RIP
	Teamviewer Auto-Ok
	If WinExists("Sponsored session") Then
	$tv = WinGetHandle("Sponsored session")
	WinActivate($tv)
	ControlSend($tv, "", "", "{enter down}{enter up}")
	ConsoleWrite("Sponsored session "&$tv&" " & @HOUR & ":" & @MIN & ":" & @SEC & @CRLF)
	EndIf
#ce
; If idle for more than 15 min
#cs
	If _Timer_GetIdleTime() > 15 * 60 * 1000 Then
	; Assume Idle
	_Monitor_OFF()
	ConsoleWrite("Idle at " & @HOUR & ":" & @MIN & ":" & @SEC & @CRLF)
	; Now idle the script until the use does something
	While _Timer_GetIdleTime() > 500
	Sleep(10)
	WEnd
	; Assume active
	ConsoleWrite("Active at " & @HOUR & ":" & @MIN & ":" & @SEC & @CRLF)
	EndIf
	;ConsoleWrite("Wend " & @HOUR & ":" & @MIN & ":" & @SEC & @CRLF)
#ce


